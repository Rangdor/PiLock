
from DB_Classes import *
from time import sleep
from time import time as timestamp
#import RPi.GPIO as GPIO
import time, datetime, os, serial


techs = user_DB("RME_Users")
gate_log = log_DB("Gate_Log")
path = "E:\\" #Windows
#path = " " #Linux

######################################################
#                  Serial Functions                  #
######################################################
#Init Serial Comms
#COM = "/dev/ttyACM0" #Linux
COM = "COM4"          #Windows
BAUD = 9600
try:
    ser = serial.Serial(COM, BAUD, timeout = 0.00625)
except:
    print("Scanner Unavailable")
    input()


#Read serial line and write to log
def read_scanner():  
        while True:
                val = str(ser.readline().decode('ascii'))
                if len(val) > 5:
                        print()
                        return val
                        break

######################################################
#                Relay GPIO Functions                #
######################################################
##pin = 18
##
##GPIO.setmode(GPIO.BCM)
##GPIO.setup(pin, GPIO.OUT)
##
def relayHigh():
    print("High")
    GPIO.output(pin, GPIO.HIGH)
def relayLow():
    print("Low")
    GPIO.output(pin, GPIO.LOW)


######################################################
#                 User Menu Functions                #
######################################################

def add():
    print("Full Name: ",end="")
    name=input()
    print("Login: ",end="")
    login=input()
    print("Scan Badge: ",end="")
    badge=read_scanner()
    print("Permissions: ",end="")
    permissions=input()    
    print(name," ",login," ",badge," ",permissions)
    print("Correct(Y/N): ",end="")
    state = input()
    if state==("y" or "Y"):
        techs.add(name,login,badge,permissions)
    else:
        add()

def remove():
    print("Scan Badge: ",end="")
    badge=read_scanner()
    techs.remove(badge)

def check_user():
    print("Scan Badge: ",end="")
    badge=read_scanner()
    if techs.check_user(badge):
        print("Badge:",badge,"    Name:",techs.get_name(badge))
    else:
        print("Badge:",badge," not found.")
    print("Press and key to close.....",end="")
    input()
        
def check_permissions():
    print("Scan Badge: ",end="")
    badge=read_scanner()
    print("Perssions Level:",techs.check_permissions(badge))
    print("Press and key to close.....",end="")
    input()

def dump(db):
    db.dump()
    print("Press and key to close.....",end="")
    input()
    os.system('clear')

def export(db,name,path):
    print(str(path)+name)
    db.export(path+name)

def user_admin_menu():
    print("""
_________________________________
1)Add User
2)Remove User
3)Check For User
4)Check Permissions
5)Display All Users
6)Export to .csv
7)Back to Main Menu
_________________________________
""")
    state=input()
    os.system('clear')
    if state == "1":
        add()
    if state == '2':
        remove()
    if state == '3':
        check_user()
    if state == '4':
        check_permissions()
    if state == '5':
        dump(techs)
    if state == '6':
        export(techs,"techs",path)
    if state == '7':
        main_menu()
    os.system('clear')

######################################################
#                  Main Menu                         #
######################################################
def time_output():
	time=int(timestamp())
	output= str(datetime.datetime.fromtimestamp(time).isoformat())
	return output.replace("T"," ")

def open_gate():
    print("Scan Badge...")
    scan = read_scanner()
    if techs.check_user(scan) and techs.check_permissions(scan) < 3:
        print("Gate Open...")######################################################
        time_in=time.time()
        relayHigh()
        print("Name:",techs.get_name(scan),"Time: ",time_output())
        sleep(3)
        relayLow()
        print("Close Gate...")######################################################
        input()
        time_out=time.time()
        duration = time_out - time_in
        gate_log.add(time_output(), techs.get_name(scan), int(duration))
        
    else:
        print("insufficient Pemissions...")

def access_admin_menu():
    print("""
_________________________________
1) Badge
2) Keyboard
_________________________________
""")
    state=input()

    if(state == '1'):
        print("Scan Badge...")
        scan = read_scanner()
        if techs.check_user(scan) and techs.check_permissions(scan) < 2:
            user_admin_menu()
        else:
            print("Need Admin Permissions...")
            input()
    elif(state == '2'):
        print("Enter Admin Account...")
        scan = input()
        if techs.check_user(scan) and techs.check_permissions(scan) < 2:
            user_admin_menu()
        else:
            print("Need Admin Permissions...")
            input()

def main_menu():
    print("""
_________________________________
1)Open Gate
2)Edit Users
3)Display Records
4)Export to .csv
_________________________________
""")
    state=input()
    os.system('clear')
    if state == "1":
        open_gate()
    if state == '2':
        access_admin_menu()
    if state == '3':
        dump(gate_log)
    if state == '4':
        export(gate_log,"Gate_Log",path)
    os.system('clear')



######################################################
#                   Run Main                         #
######################################################
if __name__=="__main__":
    while True:
        techs.add("Admin","Admin","11999","1")
        main_menu()
